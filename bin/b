#!/usr/bin/env python3

import os
from configparser import ConfigParser
from argparse import ArgumentParser, ArgumentTypeError


def parse_arguments():
    parser = ArgumentParser(description='Brightness Control By Using XRandR Package in Linux. \n \
                                         Run without arguments to load Default config.')

    parser.add_argument('displayNo', nargs='?', default=0, choices=list(range(1,len(displays)+1)), type=int,
                        help='Enter Display Number')
    parser.add_argument('brightness', nargs='?', default=0, type=restricted_float,
                        help='Brightness to set [0.0-1.0]')
    parser.add_argument('--set', '-s', help='Set(and save) Values of passed "mode": \n \
                                             enter `mode` after --set. If mode not found,\
                                             this script will create the passed mode.\n \
                                             If no mode is passed, Default Mode will be modified.',
                        default='default', const='default', nargs='?')
    parser.add_argument('--mode', '-m', help='Mode to use. New modes can be set by --set \
                                      Skip this flag to use Default mode', choices=config.sections())
    args=parser.parse_args()
    return args


def restricted_float(brightness):
    """For Handelling Brightness Value
    """
    x=brightness
    x = float(x)
    if x < 0.0 or x > 1.0:
        raise ArgumentTypeError("%r not in range [0.0, 1.0]"%(brightness,))
    return x


#Get the attached displays
def get_displays(): return os.popen("xrandr | grep ' connected ' | awk '{print$1 }'").read().split('\n')[:-1]


def get_config():
    """Returns the config dictionary and config file absolute path
    """
    config = ConfigParser()
    HOME=os.getenv('HOME')
    os.makedirs(HOME+'/.config/b-brightness-control', exist_ok=True)
    conf = HOME+'/.config/b-brightness-control/brightness_config.ini'
    if not os.path.exists(conf):
        config['default']={display: 1 for display in displays}
    else:
        config.read(conf)
    return config, conf


def write_config(config, filename):
    with open(filename, 'w') as file:
        config.write(file)


def set_(display, brightness, mode='default'):
    brightness=str(brightness)
    os.system("xrandr --output " + display + " --brightness " + brightness)
    if not mode in config.sections():
        config[mode]={}
        print('New Mode created: {}'.format(mode))
    config[mode][display] = brightness
    print("dispay {} set to {}".format(displays.index(display)+1, brightness))


if __name__ == "__main__":
    displays = get_displays()
    config,config_filename=get_config()
    args  =parse_arguments()
    #Setting Mode to use
    if not args.set=='default':
        mode=args.set
    elif args.mode==None: mode='default'
    else: mode=args.mode
    print("Using Mode {}".format(mode))

    #If No Display passed, apply to all displays their default values.
    if not args.displayNo:
        for display in displays:
            set_(display=display, brightness=config[mode][display], mode=mode)
    elif not args.brightness: #Display passed, but brightness not passed. Apply default.
            set_(display=displays[args.displayNo-1], brightness=config[mode][display], mode=mode)
    else: #Both Display and Brightness Given, save them to `args.set` mode
            set_(display=displays[args.displayNo-1], brightness=args.brightness, mode=mode)

    write_config(config, config_filename)
